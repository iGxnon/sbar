#!/bin/env sh

# INIT
printf "$$" > ~/.cache/pidofbar
sec=0

# MODULES
update_cpu () { 
	cpu="󰻠 $(grep -o "^[^ ]*" /proc/loadavg )" 
}

update_disk () {
	disk_perc="󰨣 $(df -hl / | awk '{print $5}' | grep -v 'Use')"
	disk_ava="󰋊 $(df -hl / | awk '{print $4}' | grep -v 'Avail')"
}

update_memory () { 
	memory="󰍛 $(free -h | sed -n "2s/\([^ ]* *\)\{2\}\([^ ]*\).*/\2/p")"
}

update_time () { 
	time="$(date "+[%a %d %b] [%I:%M %P]")" 
}

update_weather () { 
	weather="$(curl --noproxy "*" -s "wttr.in/Chongqing?format=1"| sed -E "s/^(.).*\+/\1/")" 
}

update_wifi () {
	wifi=" $(nmcli -t -f active,ssid dev wifi | grep '^yes' | cut -d: -f2)"
}

update_bat () { 
	# you might need to change the path depending on your device
	read -r bat_status </sys/class/power_supply/BAT1/status
	read -r bat_capacity </sys/class/power_supply/BAT1/capacity
	if [ "$bat_status" == Discharging ]; then
		if [ "$bat_capacity" -gt 95 ]; then
			bat="  $bat_capacity%"
		elif [ "$bat_capacity" -gt 65 ]; then
			bat="  $bat_capacity%"
		elif [ "$bat_capacity" -gt 35 ]; then
			bat="  $bat_capacity%"
		elif [ "$bat_capacity" -gt 5 ]; then
			bat="  $bat_capacity%"
		else
			bat="  $bat_capacity%"
			notify-send "Low Battery!"
		fi
	else
		bat="󱊦 $bat_capacity%"
	fi
}

update_vol () { 
	vol="$([ "$(amixer sget Master | awk -F'[][]' '{ print $6 }' | grep -v '^$')" = "on" ] && printf ' ' || printf ' ')$(amixer sget Master | awk -F'[][]' '{ print $2 }' | grep -v '^$')"
}

update_backlight () { 
	# you might need to change the path depending on your device
	read -r actual_brightness </sys/class/backlight/intel_backlight/actual_brightness
	read -r max_brightness </sys/class/backlight/intel_backlight/max_brightness
	backlight=" $((actual_brightness*100/max_brightness))%"
}

# For calcurse users, refer https://github.com/pystardust/automeet
#update_event () { 
#	event="$(calcurse -n | sed 1d | \
#		sed -E "s_^ *\[(.*):(.*)\] ([^\t]*)\t?.*_[\1h \2m->\3]_")" 
#	[ "[]" = "$event" ] && event=""
#}


# modules that don't update on their own need to be run at the start for getting their initial value
update_vol
update_backlight
update_disk
update_wifi

display () { 
	#printf "%s\n" " $event [$weather] [$memory $cpu] [$bat] [$backlight] [$vol] $time "
	xsetroot -name " [$weather] [$disk_perc $disk_ava] [$memory $cpu] [$wifi] [$bat] [$backlight] [$vol] $time "
}

# SIGNALLING
# trap	"<function>;display"		"RTMIN+n"
trap	"update_vol;display"		"RTMIN"
trap	"update_backlight;display" 	"RTMIN+1"
trap	"update_bat;display" 		"RTMIN+2"
trap 	"update_disk;display"		"RTMIN+3"
trap 	"update_weather;display"	"RTMIN+4"
trap 	"update_wifi;display"		"RTMIN+5"
# to update it from external commands
## kill -m "$(cat ~/.cache/pidofbar)"
# where m = 34 + n

while true
do
	sleep 1 & wait && { 
		# to update item ever n seconds with a offset of m
		## [ $((sec % n)) -eq m ] && udpate_item
		[ $((sec % 5 )) -eq 0 ] && update_time 
		[ $((sec % 15)) -eq 0 ] && update_cpu 
		[ $((sec % 15)) -eq 0 ] && update_memory
		[ $((sec % 30)) -eq 0 ] && update_bat
		[ $((sec % 3600)) -eq 2 ] && update_weather 
		#[ $((sec % 300)) -eq 1 ] && update_event

		# how often the display updates ( 5 seconds )
		[ $((sec % 5 )) -eq 0 ] && display
		sec=$((sec + 1))
	}
done 

